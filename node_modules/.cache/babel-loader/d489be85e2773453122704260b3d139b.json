{"ast":null,"code":"import { rest } from 'msw';\nimport * as db from './db';\nimport { AUTH_URL } from '../config';\n/*pour simuler du delais*/\n// eslint-disable-next-line no-unused-vars\n\nconst sleep = t => new Promise(resolve => setTimeout(resolve, t));\n\nconst handlers = [rest.post(`${AUTH_URL}/login`, async (req, res, ctx) => {\n  const {\n    username,\n    password\n  } = req.body; // await sleep(3000)\n\n  const user = await db.authenticate({\n    username,\n    password\n  });\n  return res(ctx.json({\n    user\n  }));\n}), rest.post(`${AUTH_URL}/register`, async (req, res, ctx) => {\n  const {\n    username,\n    password\n  } = req.body;\n  const userFields = {\n    username,\n    password\n  };\n  await db.createUser(userFields);\n  let user;\n\n  try {\n    user = await db.authenticate(userFields);\n  } catch (error) {\n    return res(ctx.status(400), ctx.json({\n      status: 400,\n      message: error.message\n    }));\n  }\n\n  return res(ctx.json({\n    user\n  }));\n}), rest.get(`${AUTH_URL}/me`, async (req, res, ctx) => {\n  const user = await getUser(req);\n  const token = getToken(req);\n  return res(ctx.json({\n    user: { ...user,\n      token\n    }\n  }));\n}), rest.get(`${AUTH_URL}/bookmark`, async (req, res, ctx) => {\n  const user = await getUser(req);\n  const uid = user.id;\n  const bookmark = await db.loadBookmarkByUid(uid);\n  return res(ctx.json({\n    bookmark\n  }));\n}), rest.post(`${AUTH_URL}/bookmark/tv`, async (req, res, ctx) => {\n  const user = await getUser(req);\n  const {\n    id\n  } = req.body;\n  const uid = user.id;\n\n  try {\n    await db.addSerieToBookmark(id, uid);\n  } catch (error) {\n    return res(ctx.status(400), ctx.json({\n      status: 400,\n      message: error.message\n    }));\n  }\n\n  const bookmark = await db.loadBookmarkByUid(uid);\n  return res(ctx.json({\n    bookmark\n  }));\n}), rest.post(`${AUTH_URL}/bookmark/movie`, async (req, res, ctx) => {\n  const user = await getUser(req);\n  const {\n    id\n  } = req.body;\n  const uid = user.id;\n\n  try {\n    await db.addMovieToBookmark(id, uid);\n  } catch (error) {\n    return res(ctx.status(400), ctx.json({\n      status: 400,\n      message: error.message\n    }));\n  }\n\n  const bookmark = await db.loadBookmarkByUid(uid);\n  return res(ctx.json({\n    bookmark\n  }));\n}), rest.delete(`${AUTH_URL}/bookmark/movie`, async (req, res, ctx) => {\n  const user = await getUser(req);\n  const {\n    id\n  } = req.body;\n  await db.deleteMovieToBookmark(id, user.id);\n  const bookmark = await db.loadBookmarkByUid(id);\n  return res(ctx.json({\n    bookmark\n  }));\n}), rest.delete(`${AUTH_URL}/bookmark/tv`, async (req, res, ctx) => {\n  const user = await getUser(req);\n  const {\n    id\n  } = req.body;\n  await db.deleteSerieToBookmark(id, user.id);\n  const bookmark = await db.loadBookmarkByUid(id);\n  return res(ctx.json({\n    bookmark\n  }));\n})];\n\nconst getToken = req => {\n  var _req$headers$get;\n\n  return (_req$headers$get = req.headers.get('Authorization')) === null || _req$headers$get === void 0 ? void 0 : _req$headers$get.replace('Bearer ', '');\n};\n\nasync function getUser(req) {\n  const token = getToken(req);\n\n  if (!token) {\n    const error = new Error('Le Token est obligatoire');\n    error.status = 401;\n    throw error;\n  }\n\n  let userId;\n\n  try {\n    userId = Buffer.from(token, 'base64').toString();\n  } catch (e) {\n    const error = new Error('token Invalid. Merci de se reconnecter.');\n    error.status = 401;\n    throw error;\n  }\n\n  const user = await db.loadUserById(userId, true);\n  return user;\n}\n\nexport { handlers };","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/mocks/handlers.js"],"names":["rest","db","AUTH_URL","sleep","t","Promise","resolve","setTimeout","handlers","post","req","res","ctx","username","password","body","user","authenticate","json","userFields","createUser","error","status","message","get","getUser","token","getToken","uid","id","bookmark","loadBookmarkByUid","addSerieToBookmark","addMovieToBookmark","delete","deleteMovieToBookmark","deleteSerieToBookmark","headers","replace","Error","userId","Buffer","from","toString","e","loadUserById"],"mappings":"AAAA,SAAQA,IAAR,QAAmB,KAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,MAApB;AACA,SAAQC,QAAR,QAAuB,WAAvB;AAEA;AACA;;AACA,MAAMC,KAAK,GAAGC,CAAC,IAAI,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,CAAV,CAAjC,CAAnB;;AAEA,MAAMI,QAAQ,GAAG,CACfR,IAAI,CAACS,IAAL,CAAW,GAAEP,QAAS,QAAtB,EAA+B,OAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,KAAyB;AACtD,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAuBJ,GAAG,CAACK,IAAjC,CADsD,CAEtD;;AACA,QAAMC,IAAI,GAAG,MAAMf,EAAE,CAACgB,YAAH,CAAgB;AAACJ,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAhB,CAAnB;AACA,SAAOH,GAAG,CAACC,GAAG,CAACM,IAAJ,CAAS;AAACF,IAAAA;AAAD,GAAT,CAAD,CAAV;AACD,CALD,CADe,EAQfhB,IAAI,CAACS,IAAL,CAAW,GAAEP,QAAS,WAAtB,EAAkC,OAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,KAAyB;AACzD,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAuBJ,GAAG,CAACK,IAAjC;AACA,QAAMI,UAAU,GAAG;AAACN,IAAAA,QAAD;AAAWC,IAAAA;AAAX,GAAnB;AACA,QAAMb,EAAE,CAACmB,UAAH,CAAcD,UAAd,CAAN;AACA,MAAIH,IAAJ;;AACA,MAAI;AACFA,IAAAA,IAAI,GAAG,MAAMf,EAAE,CAACgB,YAAH,CAAgBE,UAAhB,CAAb;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,WAAOV,GAAG,CACRC,GAAG,CAACU,MAAJ,CAAW,GAAX,CADQ,EAERV,GAAG,CAACM,IAAJ,CAAS;AAACI,MAAAA,MAAM,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAEF,KAAK,CAACE;AAA7B,KAAT,CAFQ,CAAV;AAID;;AACD,SAAOZ,GAAG,CAACC,GAAG,CAACM,IAAJ,CAAS;AAACF,IAAAA;AAAD,GAAT,CAAD,CAAV;AACD,CAdD,CARe,EAwBfhB,IAAI,CAACwB,GAAL,CAAU,GAAEtB,QAAS,KAArB,EAA2B,OAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,KAAyB;AAClD,QAAMI,IAAI,GAAG,MAAMS,OAAO,CAACf,GAAD,CAA1B;AACA,QAAMgB,KAAK,GAAGC,QAAQ,CAACjB,GAAD,CAAtB;AACA,SAAOC,GAAG,CAACC,GAAG,CAACM,IAAJ,CAAS;AAACF,IAAAA,IAAI,EAAE,EAAC,GAAGA,IAAJ;AAAUU,MAAAA;AAAV;AAAP,GAAT,CAAD,CAAV;AACD,CAJD,CAxBe,EA8Bf1B,IAAI,CAACwB,GAAL,CAAU,GAAEtB,QAAS,WAArB,EAAiC,OAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,KAAyB;AACxD,QAAMI,IAAI,GAAG,MAAMS,OAAO,CAACf,GAAD,CAA1B;AACA,QAAMkB,GAAG,GAAGZ,IAAI,CAACa,EAAjB;AACA,QAAMC,QAAQ,GAAG,MAAM7B,EAAE,CAAC8B,iBAAH,CAAqBH,GAArB,CAAvB;AACA,SAAOjB,GAAG,CAACC,GAAG,CAACM,IAAJ,CAAS;AAACY,IAAAA;AAAD,GAAT,CAAD,CAAV;AACD,CALD,CA9Be,EAqCf9B,IAAI,CAACS,IAAL,CAAW,GAAEP,QAAS,cAAtB,EAAqC,OAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,KAAyB;AAC5D,QAAMI,IAAI,GAAG,MAAMS,OAAO,CAACf,GAAD,CAA1B;AACA,QAAM;AAACmB,IAAAA;AAAD,MAAOnB,GAAG,CAACK,IAAjB;AACA,QAAMa,GAAG,GAAGZ,IAAI,CAACa,EAAjB;;AACA,MAAI;AACF,UAAM5B,EAAE,CAAC+B,kBAAH,CAAsBH,EAAtB,EAA0BD,GAA1B,CAAN;AACD,GAFD,CAEE,OAAOP,KAAP,EAAc;AACd,WAAOV,GAAG,CACRC,GAAG,CAACU,MAAJ,CAAW,GAAX,CADQ,EAERV,GAAG,CAACM,IAAJ,CAAS;AAACI,MAAAA,MAAM,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAEF,KAAK,CAACE;AAA7B,KAAT,CAFQ,CAAV;AAID;;AACD,QAAMO,QAAQ,GAAG,MAAM7B,EAAE,CAAC8B,iBAAH,CAAqBH,GAArB,CAAvB;AACA,SAAOjB,GAAG,CAACC,GAAG,CAACM,IAAJ,CAAS;AAACY,IAAAA;AAAD,GAAT,CAAD,CAAV;AACD,CAdD,CArCe,EAoDf9B,IAAI,CAACS,IAAL,CAAW,GAAEP,QAAS,iBAAtB,EAAwC,OAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,KAAyB;AAC/D,QAAMI,IAAI,GAAG,MAAMS,OAAO,CAACf,GAAD,CAA1B;AACA,QAAM;AAACmB,IAAAA;AAAD,MAAOnB,GAAG,CAACK,IAAjB;AACA,QAAMa,GAAG,GAAGZ,IAAI,CAACa,EAAjB;;AACA,MAAI;AACF,UAAM5B,EAAE,CAACgC,kBAAH,CAAsBJ,EAAtB,EAA0BD,GAA1B,CAAN;AACD,GAFD,CAEE,OAAOP,KAAP,EAAc;AACd,WAAOV,GAAG,CACRC,GAAG,CAACU,MAAJ,CAAW,GAAX,CADQ,EAERV,GAAG,CAACM,IAAJ,CAAS;AAACI,MAAAA,MAAM,EAAE,GAAT;AAAcC,MAAAA,OAAO,EAAEF,KAAK,CAACE;AAA7B,KAAT,CAFQ,CAAV;AAID;;AACD,QAAMO,QAAQ,GAAG,MAAM7B,EAAE,CAAC8B,iBAAH,CAAqBH,GAArB,CAAvB;AACA,SAAOjB,GAAG,CAACC,GAAG,CAACM,IAAJ,CAAS;AAACY,IAAAA;AAAD,GAAT,CAAD,CAAV;AACD,CAdD,CApDe,EAoEf9B,IAAI,CAACkC,MAAL,CAAa,GAAEhC,QAAS,iBAAxB,EAA0C,OAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,KAAyB;AACjE,QAAMI,IAAI,GAAG,MAAMS,OAAO,CAACf,GAAD,CAA1B;AACA,QAAM;AAACmB,IAAAA;AAAD,MAAOnB,GAAG,CAACK,IAAjB;AACA,QAAMd,EAAE,CAACkC,qBAAH,CAAyBN,EAAzB,EAA6Bb,IAAI,CAACa,EAAlC,CAAN;AACA,QAAMC,QAAQ,GAAG,MAAM7B,EAAE,CAAC8B,iBAAH,CAAqBF,EAArB,CAAvB;AACA,SAAOlB,GAAG,CAACC,GAAG,CAACM,IAAJ,CAAS;AAACY,IAAAA;AAAD,GAAT,CAAD,CAAV;AACD,CAND,CApEe,EA2Ef9B,IAAI,CAACkC,MAAL,CAAa,GAAEhC,QAAS,cAAxB,EAAuC,OAAOQ,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,KAAyB;AAC9D,QAAMI,IAAI,GAAG,MAAMS,OAAO,CAACf,GAAD,CAA1B;AACA,QAAM;AAACmB,IAAAA;AAAD,MAAOnB,GAAG,CAACK,IAAjB;AACA,QAAMd,EAAE,CAACmC,qBAAH,CAAyBP,EAAzB,EAA6Bb,IAAI,CAACa,EAAlC,CAAN;AACA,QAAMC,QAAQ,GAAG,MAAM7B,EAAE,CAAC8B,iBAAH,CAAqBF,EAArB,CAAvB;AACA,SAAOlB,GAAG,CAACC,GAAG,CAACM,IAAJ,CAAS;AAACY,IAAAA;AAAD,GAAT,CAAD,CAAV;AACD,CAND,CA3Ee,CAAjB;;AAoFA,MAAMH,QAAQ,GAAGjB,GAAG;AAAA;;AAAA,6BAAIA,GAAG,CAAC2B,OAAJ,CAAYb,GAAZ,CAAgB,eAAhB,CAAJ,qDAAI,iBAAkCc,OAAlC,CAA0C,SAA1C,EAAqD,EAArD,CAAJ;AAAA,CAApB;;AAEA,eAAeb,OAAf,CAAuBf,GAAvB,EAA4B;AAC1B,QAAMgB,KAAK,GAAGC,QAAQ,CAACjB,GAAD,CAAtB;;AACA,MAAI,CAACgB,KAAL,EAAY;AACV,UAAML,KAAK,GAAG,IAAIkB,KAAJ,CAAU,0BAAV,CAAd;AACAlB,IAAAA,KAAK,CAACC,MAAN,GAAe,GAAf;AACA,UAAMD,KAAN;AACD;;AACD,MAAImB,MAAJ;;AACA,MAAI;AACFA,IAAAA,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYhB,KAAZ,EAAmB,QAAnB,EAA6BiB,QAA7B,EAAT;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,UAAMvB,KAAK,GAAG,IAAIkB,KAAJ,CAAU,yCAAV,CAAd;AACAlB,IAAAA,KAAK,CAACC,MAAN,GAAe,GAAf;AACA,UAAMD,KAAN;AACD;;AACD,QAAML,IAAI,GAAG,MAAMf,EAAE,CAAC4C,YAAH,CAAgBL,MAAhB,EAAwB,IAAxB,CAAnB;AACA,SAAOxB,IAAP;AACD;;AAED,SAAQR,QAAR","sourcesContent":["import {rest} from 'msw'\nimport * as db from './db'\nimport {AUTH_URL} from '../config'\n\n/*pour simuler du delais*/\n// eslint-disable-next-line no-unused-vars\nconst sleep = t => new Promise(resolve => setTimeout(resolve, t))\n\nconst handlers = [\n  rest.post(`${AUTH_URL}/login`, async (req, res, ctx) => {\n    const {username, password} = req.body\n    // await sleep(3000)\n    const user = await db.authenticate({username, password})\n    return res(ctx.json({user}))\n  }),\n\n  rest.post(`${AUTH_URL}/register`, async (req, res, ctx) => {\n    const {username, password} = req.body\n    const userFields = {username, password}\n    await db.createUser(userFields)\n    let user\n    try {\n      user = await db.authenticate(userFields)\n    } catch (error) {\n      return res(\n        ctx.status(400),\n        ctx.json({status: 400, message: error.message}),\n      )\n    }\n    return res(ctx.json({user}))\n  }),\n\n  rest.get(`${AUTH_URL}/me`, async (req, res, ctx) => {\n    const user = await getUser(req)\n    const token = getToken(req)\n    return res(ctx.json({user: {...user, token}}))\n  }),\n\n  rest.get(`${AUTH_URL}/bookmark`, async (req, res, ctx) => {\n    const user = await getUser(req)\n    const uid = user.id\n    const bookmark = await db.loadBookmarkByUid(uid)\n    return res(ctx.json({bookmark}))\n  }),\n\n  rest.post(`${AUTH_URL}/bookmark/tv`, async (req, res, ctx) => {\n    const user = await getUser(req)\n    const {id} = req.body\n    const uid = user.id\n    try {\n      await db.addSerieToBookmark(id, uid)\n    } catch (error) {\n      return res(\n        ctx.status(400),\n        ctx.json({status: 400, message: error.message}),\n      )\n    }\n    const bookmark = await db.loadBookmarkByUid(uid)\n    return res(ctx.json({bookmark}))\n  }),\n  rest.post(`${AUTH_URL}/bookmark/movie`, async (req, res, ctx) => {\n    const user = await getUser(req)\n    const {id} = req.body\n    const uid = user.id\n    try {\n      await db.addMovieToBookmark(id, uid)\n    } catch (error) {\n      return res(\n        ctx.status(400),\n        ctx.json({status: 400, message: error.message}),\n      )\n    }\n    const bookmark = await db.loadBookmarkByUid(uid)\n    return res(ctx.json({bookmark}))\n  }),\n\n  rest.delete(`${AUTH_URL}/bookmark/movie`, async (req, res, ctx) => {\n    const user = await getUser(req)\n    const {id} = req.body\n    await db.deleteMovieToBookmark(id, user.id)\n    const bookmark = await db.loadBookmarkByUid(id)\n    return res(ctx.json({bookmark}))\n  }),\n  rest.delete(`${AUTH_URL}/bookmark/tv`, async (req, res, ctx) => {\n    const user = await getUser(req)\n    const {id} = req.body\n    await db.deleteSerieToBookmark(id, user.id)\n    const bookmark = await db.loadBookmarkByUid(id)\n    return res(ctx.json({bookmark}))\n  }),\n]\n\nconst getToken = req => req.headers.get('Authorization')?.replace('Bearer ', '')\n\nasync function getUser(req) {\n  const token = getToken(req)\n  if (!token) {\n    const error = new Error('Le Token est obligatoire')\n    error.status = 401\n    throw error\n  }\n  let userId\n  try {\n    userId = Buffer.from(token, 'base64').toString()\n  } catch (e) {\n    const error = new Error('token Invalid. Merci de se reconnecter.')\n    error.status = 401\n    throw error\n  }\n  const user = await db.loadUserById(userId, true)\n  return user\n}\n\nexport {handlers}\n"]},"metadata":{},"sourceType":"module"}