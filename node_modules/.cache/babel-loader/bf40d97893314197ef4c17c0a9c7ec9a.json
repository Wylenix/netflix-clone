{"ast":null,"code":"var _jsxFileName = \"/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/skeletons/RowSkeleton.exercise.js\";\nimport * as React from 'react'; // üê∂ importe le composant Skeleton de MUI\n// üìë Le lien vers la documentation de Skeleton https://mui.com/components/skeleton/\n\nimport { Skeleton } from '@mui/material'; // üê∂ Le style et le rendu du composant <NetflixHeader> et copier coller ci dessous\n// üê∂ Ton boulot est de remplacer les donn√©es manquantes par des composants <Skeleton />\n// üê∂ Nous voulons <RowSkeleton> g√®re le nombre de Skeleton image √† afficher\n// ainsi que le titre et le mode poster/large\n// üê∂ cr√©√© 3 props\n// 1. 'nbElement' initialis√© √† 20 par d√©faut\n// 1. 'title' initialis√© √† 'films' par d√©faut\n// 3. 'wideImage' initialis√© √† 'true' par d√©faut\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RowSkeleton = ({\n  nbElement = 20,\n  title = 'films',\n  wideImage = true\n}) => {\n  // üê∂ d√©clare un array 'postersSkeletons'\n  let postersSkeletons = [];\n\n  for (let i = 0; i < nbElement; i++) {\n    postersSkeletons.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__poster row__posterLarge\",\n      children: /*#__PURE__*/_jsxDEV(Skeleton, {\n        variant: \"rect\",\n        width: wideImage ? 400 : 166,\n        height: wideImage ? 225 : 250\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this));\n  } // üê∂ fait une boucle `for` de 0 √† 'nbElement' et ajoute dans 'postersSkeletons' :\n  // - une <div> avec 'className' 'row__poster' et 'row__posterLarge' et\n  // - qui contient un composant  <Skeleton>\n  // Propi√©t√© de <Skeleton>\n  // - utilise le prop: variant = \"rect\"\n  // - utilise les props 'width' et 'height' pour dimensionner le skeleton\n  // 400 x 225 si 'wideImage' = true (format large)\n  // 166 x 250 sinon (format poster)\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row__posters\",\n        children: [\"\\uD83D\\uDC36 remplace l'array 'data.data.results' par l'array 'postersSkeletons'\", postersSkeletons.map(movie => {\n          return postersSkeletons;\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_c = RowSkeleton;\nexport { RowSkeleton };\n\nvar _c;\n\n$RefreshReg$(_c, \"RowSkeleton\");","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/skeletons/RowSkeleton.exercise.js"],"names":["React","Skeleton","RowSkeleton","nbElement","title","wideImage","postersSkeletons","i","push","map","movie"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CACA;AACA;;AACA,SAAQC,QAAR,QAAuB,eAAvB,C,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;AACA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,SAAS,GAAG,EAAb;AAAiBC,EAAAA,KAAK,GAAG,OAAzB;AAAkCC,EAAAA,SAAS,GAAG;AAA9C,CAAD,KAAyD;AAC3E;AACA,MAAIC,gBAAgB,GAAG,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAApB,EAA+BI,CAAC,EAAhC,EAAoC;AAClCD,IAAAA,gBAAgB,CAACE,IAAjB,eACE;AAAa,MAAA,SAAS,EAAC,8BAAvB;AAAA,6BACE,QAAC,QAAD;AACE,QAAA,OAAO,EAAC,MADV;AAEE,QAAA,KAAK,EAAEH,SAAS,GAAG,GAAH,GAAS,GAF3B;AAGE,QAAA,MAAM,EAAEA,SAAS,GAAG,GAAH,GAAS;AAH5B;AAAA;AAAA;AAAA;AAAA;AADF,OAAUE,CAAV;AAAA;AAAA;AAAA;AAAA,YADF;AASD,GAb0E,CAc3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA,kBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,uGAEGE,gBAAgB,CAACG,GAAjB,CAAqBC,KAAK,IAAI;AAC7B,iBAAOJ,gBAAP;AACD,SAFA,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAaD,CAnCD;;KAAMJ,W;AAoCN,SAAQA,WAAR","sourcesContent":["import * as React from 'react'\n// üê∂ importe le composant Skeleton de MUI\n// üìë Le lien vers la documentation de Skeleton https://mui.com/components/skeleton/\nimport {Skeleton} from '@mui/material'\n// üê∂ Le style et le rendu du composant <NetflixHeader> et copier coller ci dessous\n// üê∂ Ton boulot est de remplacer les donn√©es manquantes par des composants <Skeleton />\n\n// üê∂ Nous voulons <RowSkeleton> g√®re le nombre de Skeleton image √† afficher\n// ainsi que le titre et le mode poster/large\n// üê∂ cr√©√© 3 props\n// 1. 'nbElement' initialis√© √† 20 par d√©faut\n// 1. 'title' initialis√© √† 'films' par d√©faut\n// 3. 'wideImage' initialis√© √† 'true' par d√©faut\nconst RowSkeleton = ({nbElement = 20, title = 'films', wideImage = true}) => {\n  // üê∂ d√©clare un array 'postersSkeletons'\n  let postersSkeletons = []\n  for (let i = 0; i < nbElement; i++) {\n    postersSkeletons.push(\n      <div key={i} className=\"row__poster row__posterLarge\">\n        <Skeleton\n          variant=\"rect\"\n          width={wideImage ? 400 : 166}\n          height={wideImage ? 225 : 250}\n        />\n      </div>,\n    )\n  }\n  // üê∂ fait une boucle `for` de 0 √† 'nbElement' et ajoute dans 'postersSkeletons' :\n  // - une <div> avec 'className' 'row__poster' et 'row__posterLarge' et\n  // - qui contient un composant  <Skeleton>\n  // Propi√©t√© de <Skeleton>\n  // - utilise le prop: variant = \"rect\"\n  // - utilise les props 'width' et 'height' pour dimensionner le skeleton\n  // 400 x 225 si 'wideImage' = true (format large)\n  // 166 x 250 sinon (format poster)\n  return (\n    <>\n      <div className=\"row\">\n        <h2>{title}</h2>\n        <div className=\"row__posters\">\n          üê∂ remplace l'array 'data.data.results' par l'array 'postersSkeletons'\n          {postersSkeletons.map(movie => {\n            return postersSkeletons\n          })}\n        </div>\n      </div>\n    </>\n  )\n}\nexport {RowSkeleton}\n"]},"metadata":{},"sourceType":"module"}