{"ast":null,"code":"import * as React from 'react'; // 🐶 importe le composant Skeleton de MUI\n// 📑 Le lien vers la documentation de Skeleton https://mui.com/components/skeleton/\n// 🐶 Le style et le rendu du composant <NetflixHeader> et copier coller ci dessous\n// 🐶 Ton boulot est de remplacer les données manquantes par des composants <Skeleton />\n// 🐶 Nous voulons <RowSkeleton> gère le nombre de Skeleton image à afficher\n// ainsi que le titre et le mode poster/large\n// 🐶 créé 3 props\n// 1. 'nbElement' initialisé à 20 par défaut\n// 1. 'title' initialisé à 'films' par défaut\n// 3. 'wideImage' initialisé à 'true' par défaut\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RowSkeleton = () => {\n  // 🐶 déclare un array 'postersSkeletons'\n  // 🐶 fait une boucle `for` de 0 à 'nbElement' et ajoute dans 'postersSkeletons' : \n  // - une <div> avec 'className' 'row__poster' et 'row__posterLarge' et   \n  // - qui contient un composant  <Skeleton>\n  // Propiété de <Skeleton>\n  // - utilise le prop: variant = \"rect\"\n  // - utilise les props 'width' et 'height' pour dimensionner le skeleton\n  // 400 x 225 si 'wideImage' = true (format large)\n  // 166 x 250 sinon (format poster)\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_c = RowSkeleton;\nexport { RowSkeleton };\n\nvar _c;\n\n$RefreshReg$(_c, \"RowSkeleton\");","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/skeletons/RowSkeleton.exercise.js"],"names":["React","RowSkeleton"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CACA;AACA;AAEA;AACA;AAGE;AACA;AACA;AACA;AACA;AACA;;;;;AACF,MAAMC,WAAW,GAAG,MAAM;AACxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBACA,qCADA;AAuBD,CAlCD;;KAAMA,W;AAmCN,SAAQA,WAAR","sourcesContent":["import * as React from 'react'\n// 🐶 importe le composant Skeleton de MUI\n// 📑 Le lien vers la documentation de Skeleton https://mui.com/components/skeleton/\n\n// 🐶 Le style et le rendu du composant <NetflixHeader> et copier coller ci dessous\n// 🐶 Ton boulot est de remplacer les données manquantes par des composants <Skeleton />\n\n\n  // 🐶 Nous voulons <RowSkeleton> gère le nombre de Skeleton image à afficher\n  // ainsi que le titre et le mode poster/large\n  // 🐶 créé 3 props\n  // 1. 'nbElement' initialisé à 20 par défaut\n  // 1. 'title' initialisé à 'films' par défaut\n  // 3. 'wideImage' initialisé à 'true' par défaut\nconst RowSkeleton = () => {\n  // 🐶 déclare un array 'postersSkeletons'\n\n  // 🐶 fait une boucle `for` de 0 à 'nbElement' et ajoute dans 'postersSkeletons' : \n  // - une <div> avec 'className' 'row__poster' et 'row__posterLarge' et   \n  // - qui contient un composant  <Skeleton>\n  // Propiété de <Skeleton>\n  // - utilise le prop: variant = \"rect\"\n  // - utilise les props 'width' et 'height' pour dimensionner le skeleton\n  // 400 x 225 si 'wideImage' = true (format large)\n  // 166 x 250 sinon (format poster)\n  return (\n  <>\n    {/* <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n\n        🐶 remplace l'array 'data.data.results' par l'array 'postersSkeletons'\n        \n        {data.data.results.map(movie => {\n          return (\n            <div\n              key={movie.id}\n              className={`row__poster row__posterLarge ${watermarkClass}`}\n            >\n              <img src={buildImagePath(movie)} alt={movie.name} />\n            </div>\n          )\n        })}\n      </div>\n    </div> */}\n\n  </>\n  )\n}\nexport {RowSkeleton}"]},"metadata":{},"sourceType":"module"}