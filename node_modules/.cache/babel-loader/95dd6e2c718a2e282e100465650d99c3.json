{"ast":null,"code":"var _jsxFileName = \"/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixApp.exercise.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { NetflixAppBar } from './NetflixAppBar';\nimport { NetflixRow } from './NetflixRow';\nimport { NetFlixFooter } from './NetFlixFooter';\nimport { NetflixHeader } from './NetflixHeader';\nimport { getRandomType, getRandomId } from '../utils/helper';\nimport { clientApi } from '../utils/clientApi';\nimport { makeStyles } from '@mui/styles';\nimport { Alert, AlertTitle } from '@mui/material';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useFetchData } from '../utils/hooks';\nimport './Netflix.css'; // üê∂ Ajoute des nouveaux types de <NetflixRow /> dans le render\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  alert: {\n    width: '50%',\n    margin: 'auto',\n    marginBotton: '50px'\n  },\n  progress: {\n    marginLeft: '30px'\n  }\n}));\n\nconst NetflixApp = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    data: headerMovie,\n    error,\n    status,\n    execute\n  } = useFetchData();\n  const [type] = React.useState(getRandomType());\n  const defaultMovieId = getRandomId(type);\n  React.useEffect(() => {\n    execute(clientApi(`${type}/${defaultMovieId}`)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (status === 'error') {\n    // sera catch√© par ErrorBoundary\n    throw new Error(error.message);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NetflixAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixHeader, {\n      movie: headerMovie === null || headerMovie === void 0 ? void 0 : headerMovie.data,\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixRow, {\n      wideImage: false,\n      title: \"Films Netflix\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixRow, {\n      wideImage: true,\n      title: \"S\\xE9rie Netflix\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), status === 'error' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.alert,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n          children: \"Une erreur est survenue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this), \"Detail : \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this) : null, status === 'fetching' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.progress,\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(NetFlixFooter, {\n      color: \"secondary\",\n      si: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NetflixApp, \"J8wMfPvcVM0WPa787O/aI1NLWCw=\", false, function () {\n  return [useStyles, useFetchData];\n});\n\n_c = NetflixApp;\nexport { NetflixApp };\n\nvar _c;\n\n$RefreshReg$(_c, \"NetflixApp\");","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixApp.exercise.js"],"names":["React","NetflixAppBar","NetflixRow","NetFlixFooter","NetflixHeader","getRandomType","getRandomId","clientApi","makeStyles","Alert","AlertTitle","CircularProgress","useFetchData","useStyles","theme","alert","width","margin","marginBotton","progress","marginLeft","NetflixApp","classes","data","headerMovie","error","status","execute","type","useState","defaultMovieId","useEffect","Error","message"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,SAAQC,aAAR,EAAuBC,WAAvB,QAAyC,iBAAzC;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,SAAQC,UAAR,QAAyB,aAAzB;AACA,SAAQC,KAAR,EAAeC,UAAf,QAAgC,eAAhC;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AACA,OAAO,eAAP,C,CAEA;;;AACA,MAAMC,SAAS,GAAGL,UAAU,CAACM,KAAK,KAAK;AACrCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,KADF;AAELC,IAAAA,MAAM,EAAE,MAFH;AAGLC,IAAAA,YAAY,EAAE;AAHT,GAD8B;AAMrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE;AADJ;AAN2B,CAAL,CAAN,CAA5B;;AAWA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAMC,OAAO,GAAGT,SAAS,EAAzB;AACA,QAAM;AAACU,IAAAA,IAAI,EAAEC,WAAP;AAAoBC,IAAAA,KAApB;AAA2BC,IAAAA,MAA3B;AAAmCC,IAAAA;AAAnC,MAA8Cf,YAAY,EAAhE;AACA,QAAM,CAACgB,IAAD,IAAS5B,KAAK,CAAC6B,QAAN,CAAexB,aAAa,EAA5B,CAAf;AACA,QAAMyB,cAAc,GAAGxB,WAAW,CAACsB,IAAD,CAAlC;AAEA5B,EAAAA,KAAK,CAAC+B,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,OAAO,CAACpB,SAAS,CAAE,GAAEqB,IAAK,IAAGE,cAAe,EAA3B,CAAV,CAAP,CADoB,CAEtB;AACC,GAHD,EAGG,EAHH;;AAKA,MAAIJ,MAAM,KAAK,OAAf,EAAwB;AACtB;AACA,UAAM,IAAIM,KAAJ,CAAUP,KAAK,CAACQ,OAAhB,CAAN;AACD;;AACD,sBACE;AAAA,4BACE,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAET,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAED,IAAnC;AAAyC,MAAA,IAAI,EAAEK;AAA/C;AAAA;AAAA;AAAA;AAAA,YAFF,eAWE,QAAC,UAAD;AAAY,MAAA,SAAS,EAAE,KAAvB;AAA8B,MAAA,KAAK,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,YAXF,eAmBE,QAAC,UAAD;AAAY,MAAA,SAAS,EAAE,IAAvB;AAA6B,MAAA,KAAK,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,YAnBF,EAyCGF,MAAM,KAAK,OAAX,gBACC;AAAK,MAAA,SAAS,EAAEJ,OAAO,CAACP,KAAxB;AAAA,6BACE,QAAC,KAAD;AAAO,QAAA,QAAQ,EAAC,OAAhB;AAAA,gCACE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEYU,KAAK,CAACQ,OAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADD,GAOG,IAhDN,EAkDGP,MAAM,KAAK,UAAX,gBACC;AAAK,MAAA,SAAS,EAAEJ,OAAO,CAACH,QAAxB;AAAA,8BACE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,cADF,EACuB,GADvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,GAIG,IAtDN,eAuDE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAC,WAArB;AAAiC,MAAA,EAAE;AAAnC;AAAA;AAAA;AAAA;AAAA,YAvDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2DD,CA1ED;;GAAME,U;UACYR,S,EACoCD,Y;;;KAFhDS,U;AA2EN,SAAQA,UAAR","sourcesContent":["import React from 'react'\nimport {NetflixAppBar} from './NetflixAppBar'\nimport {NetflixRow} from './NetflixRow'\nimport {NetFlixFooter} from './NetFlixFooter'\nimport {NetflixHeader} from './NetflixHeader'\nimport {getRandomType, getRandomId} from '../utils/helper'\nimport {clientApi} from '../utils/clientApi'\nimport {makeStyles} from '@mui/styles'\nimport {Alert, AlertTitle} from '@mui/material'\nimport CircularProgress from '@mui/material/CircularProgress'\nimport {useFetchData} from '../utils/hooks'\nimport './Netflix.css'\n\n// üê∂ Ajoute des nouveaux types de <NetflixRow /> dans le render\nconst useStyles = makeStyles(theme => ({\n  alert: {\n    width: '50%',\n    margin: 'auto',\n    marginBotton: '50px',\n  },\n  progress: {\n    marginLeft: '30px',\n  },\n}))\n\nconst NetflixApp = () => {\n  const classes = useStyles()\n  const {data: headerMovie, error, status, execute} = useFetchData()\n  const [type] = React.useState(getRandomType())\n  const defaultMovieId = getRandomId(type)\n\n  React.useEffect(() => {\n    execute(clientApi(`${type}/${defaultMovieId}`))\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  if (status === 'error') {\n    // sera catch√© par ErrorBoundary\n    throw new Error(error.message)\n  }\n  return (\n    <div>\n      <NetflixAppBar />\n      <NetflixHeader movie={headerMovie?.data} type={type} />\n\n      {/* \n      üê∂ Ajoute les 'props' suivants :\n        - 'watermark' √† 'true'\n        - 'type' √† TYPE_MOVIE\n        - 'filter' √† 'trending'\n        - 'wideImage' √† 'true'\n      */}\n      <NetflixRow wideImage={false} title=\"Films Netflix\" />\n      {/* \n      üê∂ Ajoute les 'props' suivants :\n        - 'watermark' √† 'true'\n        - 'type' √† TYPE_TV\n        - 'filter' √† 'trending'\n        - 'wideImage' √† 'false'\n      */}\n      <NetflixRow wideImage={true} title=\"S√©rie Netflix\" />\n\n      {/* \n        üë®‚Äç‚úàÔ∏è Hugo le chef de projet demande d'ajouter une nouvelle ligne \"Les mieux not√©s\"\n        cette ligne contiendra des films avec le logo 'netflix' et les images en format large.\n        üê∂ ajoute un  'NetflixRow' avec les bons props\n      */}\n\n      {/* \n        üë®‚Äç‚úàÔ∏è Hugo le chef de projet demande d'ajouter une nouvelle ligne \"Action & aventure\"\n        cette ligne contiendra des series avec le logo 'netflix' et les images en format large.\n        üê∂ ajoute un 'NetflixRow' avec les bons props\n        - l'id de genre 'Action & aventure' est le '10759'\n      */}\n\n      {/* \n        üë®‚Äç‚úàÔ∏è Hugo le chef de projet demande d'ajouter une nouvelle ligne \"Les meilleurs Thrillers\"\n        cette ligne contiendra des series sans le logo 'netflix' et les images en format poster.\n        üê∂ ajoute un 'NetflixRow' avec les bons props\n        - l'id de genre 'Les meilleurs Thrillers' est le '53'\n      */}\n\n      {status === 'error' ? (\n        <div className={classes.alert}>\n          <Alert severity=\"error\">\n            <AlertTitle>Une erreur est survenue</AlertTitle>\n            Detail : {error.message}\n          </Alert>\n        </div>\n      ) : null}\n\n      {status === 'fetching' ? (\n        <div className={classes.progress}>\n          <CircularProgress />{' '}\n        </div>\n      ) : null}\n      <NetFlixFooter color=\"secondary\" si />\n    </div>\n  )\n}\nexport {NetflixApp}\n"]},"metadata":{},"sourceType":"module"}