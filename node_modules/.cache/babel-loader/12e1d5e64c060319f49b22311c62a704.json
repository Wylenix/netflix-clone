{"ast":null,"code":"var _jsxFileName = \"/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixApp.exercise.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { NetflixAppBar } from './NetflixAppBar';\nimport { NetflixRow } from './NetflixRow';\nimport { NetFlixFooter } from './NetFlixFooter';\nimport axios from 'axios';\nimport { useState } from 'react'; // üê∂ importe 'axios'\n\nimport './Netflix.css'; // üê∂ passe en prop 'movie' qui contiendra les informations d'un film\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NetflixHeader = ({\n  movie\n}) => {\n  console.log(movie); // üê∂ La classe 'banner' contient une image fixe dans 'NetFlix.css' (background-image: url('../assets/images/banner.jpg'))\n  // Tu vas devoir changer l'image (donc cette propri√©t√© CSS) pour chaque nouveau film.\n  // Pour cela tu vas passer par le prop 'style' de <header> est passer l'objet avec les propi√©t√©s css.\n  // Tu vas donc avoir besoin de 2 choses : 'imageUrl' : l'url de l'image et 'banner' l'objet avec les propri√©t√©s CSS\n\n  const imageUrl = `https://image.tmdb.org/t/p/original${movie.backdrop_path}`; // üê∂ 1. Cr√©e une constante 'imageUrl' qui contient l'url de l'image\n  //  - l'image est contenu dans 'backdrop_path' de l'objet 'movie'\n  //  - la base de l'url d'image est 'https://image.tmdb.org/t/p/original'\n  //\n  // üê∂ 2. cr√©√© l'objet 'banner' avec les propi√©t√©s suivantes:\n\n  const banner = {\n    backgroundImage: `url('${imageUrl}')`,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center center',\n    color: 'white',\n    objectFit: 'contain',\n    height: '448px'\n  }; // backgroundImage: `url('${imageUrl}')`,\n  // backgroundSize: 'cover',\n  // backgroundPosition: 'center center',\n  // color: 'white',\n  // objectFit: 'contain',\n  // height: '448px',\n  // üê∂ si 'movie' n'est pas d√©fini, retourne un fragment vide ü§ñ <></>\n\n  if (!movie) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  } else {\n    var _movie$title, _movie$overview;\n\n    // üê∂ si 'movie' est d√©fini, retourne le header\n    return (\n      /*#__PURE__*/\n      // ‚õèÔ∏è supprime le prop 'className' et utilise le prop 'style' avec l'objet 'banner'\n      _jsxDEV(\"header\", {\n        style: banner,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner__contents\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"banner__title\",\n            children: (_movie$title = movie === null || movie === void 0 ? void 0 : movie.title) !== null && _movie$title !== void 0 ? _movie$title : '...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"banner__buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"banner__button banner__buttonplay\",\n              children: \"Lecture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"banner__button banner__buttonInfo\",\n              children: \"Ajouter \\xE0 ma liste\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"synopsis\",\n            children: (_movie$overview = movie === null || movie === void 0 ? void 0 : movie.overview) !== null && _movie$overview !== void 0 ? _movie$overview : '...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"banner--fadeBottom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this)\n    );\n  }\n}; // üê∂ Tu vas devoir g√©rer le fetch de donn√©es avec axios dans 'NetflixApp'\n\n\n_c = NetflixHeader;\n\nconst NetflixApp = () => {\n  _s();\n\n  // üê∂ Cr√©√© un state 'headerMovie'\n  const [headerMovie, setHeaderMovie] = useState(null);\n  const defaultMovieId = 399566; // üê∂ Cr√©√© une constante 'defaultMovieId' avec un id de film par d√©faut (399566 par exemple)\n  // üê∂ utilise ta cley d'api et langue\n\n  const apiKey = '4fc7b001e8a107fe1fddc6b41ed0f4af';\n  const lang = 'fr-fr'; // üê∂ utilise le hook 'useEffect' pour r√©cup√©rer le film sur cette url\n\n  const url = `https://api.themoviedb.org/3/movie/${defaultMovieId}?api_key=${apiKey}&language=${lang}`; //  avec axios :\n\n  useEffect(() => {\n    axios.get(url).then(response => console.log(response)).catch(error => console.error(error));\n  }, [url]); // axios\n  //   .get(url)\n  //   .then(response => console.log(response))\n  //   .catch(error => console.error(error))\n  // üê∂ met √† jour 'headerMovie' sur la reponse d'axios\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NetflixAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixHeader, {\n      movie: headerMovie.data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixRow, {\n      wideImage: false,\n      title: \"Films Netflix\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixRow, {\n      wideImage: true,\n      title: \"S\\xE9rie Netflix\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetFlixFooter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NetflixApp, \"Hr/s397R6qNTXzWt08JelZkdIGQ=\");\n\n_c2 = NetflixApp;\nexport { NetflixApp };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NetflixHeader\");\n$RefreshReg$(_c2, \"NetflixApp\");","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixApp.exercise.js"],"names":["React","useEffect","NetflixAppBar","NetflixRow","NetFlixFooter","axios","useState","NetflixHeader","movie","console","log","imageUrl","backdrop_path","banner","backgroundImage","backgroundSize","backgroundPosition","color","objectFit","height","title","overview","NetflixApp","headerMovie","setHeaderMovie","defaultMovieId","apiKey","lang","url","get","then","response","catch","error","data"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react'\nimport {NetflixAppBar} from './NetflixAppBar'\nimport {NetflixRow} from './NetflixRow'\nimport {NetFlixFooter} from './NetFlixFooter'\nimport axios from 'axios'\nimport {useState} from 'react'\n// üê∂ importe 'axios'\nimport './Netflix.css'\n\n// üê∂ passe en prop 'movie' qui contiendra les informations d'un film\nconst NetflixHeader = ({movie}) => {\n  console.log(movie)\n  // üê∂ La classe 'banner' contient une image fixe dans 'NetFlix.css' (background-image: url('../assets/images/banner.jpg'))\n  // Tu vas devoir changer l'image (donc cette propri√©t√© CSS) pour chaque nouveau film.\n  // Pour cela tu vas passer par le prop 'style' de <header> est passer l'objet avec les propi√©t√©s css.\n  // Tu vas donc avoir besoin de 2 choses : 'imageUrl' : l'url de l'image et 'banner' l'objet avec les propri√©t√©s CSS\n  const imageUrl = `https://image.tmdb.org/t/p/original${movie.backdrop_path}`\n  // üê∂ 1. Cr√©e une constante 'imageUrl' qui contient l'url de l'image\n  //  - l'image est contenu dans 'backdrop_path' de l'objet 'movie'\n  //  - la base de l'url d'image est 'https://image.tmdb.org/t/p/original'\n  //\n  // üê∂ 2. cr√©√© l'objet 'banner' avec les propi√©t√©s suivantes:\n  const banner = {\n    backgroundImage: `url('${imageUrl}')`,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center center',\n    color: 'white',\n    objectFit: 'contain',\n    height: '448px',\n  }\n  // backgroundImage: `url('${imageUrl}')`,\n  // backgroundSize: 'cover',\n  // backgroundPosition: 'center center',\n  // color: 'white',\n  // objectFit: 'contain',\n  // height: '448px',\n\n  // üê∂ si 'movie' n'est pas d√©fini, retourne un fragment vide ü§ñ <></>\n  if (!movie) {\n    return <></>\n  } else {\n    // üê∂ si 'movie' est d√©fini, retourne le header\n    return (\n      // ‚õèÔ∏è supprime le prop 'className' et utilise le prop 'style' avec l'objet 'banner'\n      <header style={banner}>\n        <div className=\"banner__contents\">\n          {/* üê∂ Utilise la propri√©t√© 'title' de 'movie' pour remplacer le titre 'La casa de papel' \n        - Note : utilise 'l'optionnal chaining' pour acc√©der √† title\n        üìë https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Operators/Optional_chaining\n        \n        - Note : Utilise 'Nullish coalescing' pour afficher '...' s'il n'y a pas de donn√©es \n        üìë https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator\n        */}\n          <h1 className=\"banner__title\">{movie?.title ?? '...'}</h1>\n          <div className=\"banner__buttons\">\n            <button className=\"banner__button banner__buttonplay\">\n              Lecture\n            </button>\n            <button className=\"banner__button banner__buttonInfo\">\n              Ajouter √† ma liste\n            </button>\n          </div>\n          <h1 className=\"synopsis\">\n            {/* üê∂ utilise la propi√©t√© 'overview' de 'movie' pour la description\n          Utilise 'l'optionnal' chaining et le 'Nullish coalescing'\n           */}\n            {movie?.overview ?? '...'}\n          </h1>\n        </div>\n        <div className=\"banner--fadeBottom\"></div>\n      </header>\n    )\n  }\n}\n\n// üê∂ Tu vas devoir g√©rer le fetch de donn√©es avec axios dans 'NetflixApp'\nconst NetflixApp = () => {\n  // üê∂ Cr√©√© un state 'headerMovie'\n  const [headerMovie, setHeaderMovie] = useState(null)\n  const defaultMovieId = 399566\n  // üê∂ Cr√©√© une constante 'defaultMovieId' avec un id de film par d√©faut (399566 par exemple)\n  // üê∂ utilise ta cley d'api et langue\n  const apiKey = '4fc7b001e8a107fe1fddc6b41ed0f4af'\n  const lang = 'fr-fr'\n\n  // üê∂ utilise le hook 'useEffect' pour r√©cup√©rer le film sur cette url\n  const url = `https://api.themoviedb.org/3/movie/${defaultMovieId}?api_key=${apiKey}&language=${lang}`\n  //  avec axios :\n  useEffect(() => {\n    axios\n      .get(url)\n      .then(response => console.log(response))\n      .catch(error => console.error(error))\n  }, [url])\n  // axios\n  //   .get(url)\n  //   .then(response => console.log(response))\n  //   .catch(error => console.error(error))\n  // üê∂ met √† jour 'headerMovie' sur la reponse d'axios\n\n  return (\n    <div>\n      <NetflixAppBar />\n      {/* üê∂ passe le prop 'movie' avec la propi√©t√© 'data' de 'headerMovie'  */}\n      <NetflixHeader movie={headerMovie.data} />\n      <NetflixRow wideImage={false} title=\"Films Netflix\" />\n      <NetflixRow wideImage={true} title=\"S√©rie Netflix\" />\n      <NetFlixFooter />\n    </div>\n  )\n}\nexport {NetflixApp}\n"]},"metadata":{},"sourceType":"module"}