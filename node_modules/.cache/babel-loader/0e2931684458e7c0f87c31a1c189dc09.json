{"ast":null,"code":"var _jsxFileName = \"/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/App.exercise.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react'; // üê∂ 'mocks' permet de simuler le backend netflix avec MSW,\n// ne t'en preocupe pas pour le moment\n\nimport './mocks';\nimport { server, handlers, db } from './mocks'; // üê∂ 'authNetflix' notre outils founis par les devs back qui permet de se connecter\n\nimport * as authNetflix from './utils/authNetflixProvider';\nimport { createTheme, ThemeProvider } from '@mui/material/styles'; // üê∂ 'AuthApp' contient tout ce qu'il y avait avant dans 'App'\n// il est import√© est retourn√©, nous avons donc le meme comportement qu'avant\n\nimport { AuthApp } from 'AuthApp';\nimport { UnauthApp } from 'UnauthApp.exercise'; // üê∂ 'UnauthApp' qui contiendra le contenu de l'application en mode non connect√©\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#E50914'\n    },\n    secondary: {\n      main: '#E50914'\n    }\n  }\n}); // üê∂ on veut afficher soit <AuthApp /> soit <UnauthApp />\n// en fonction d'un user connect√© ou non\n\nfunction App() {\n  _s();\n\n  // üê∂ cr√©√© un state 'authUser' qui contiendra le 'user' connect√©\n  const [authUser, setAuthUser] = React.useState(null); // üê∂ cr√©√© une fonction 'login' avec un param√®tre 'data' (objet avec 'username' et 'password')\n\n  function login(data) {\n    authNetflix.login(data).then(user => setAuthUser(user));\n  }\n\n  function register(data) {\n    authNetflix.register(data).then(user => setAuthUser(user));\n  }\n\n  function logout() {\n    authNetflix.logout();\n    setAuthUser(null); // cette fonction appellera ensuite la fonction 'login' de 'authNetflix' avec data en parametre\n    // met ensuite √† jour 'authUser' avec le resultat de la fonction\n    // üê∂ cr√©√© une fonction 'register' avec un param√®tre 'data' (objet avec 'username' et 'password')\n    // cette fonction appellera ensuite la fonction 'register' de  'authNetflix' avec data en parametre\n    // met ensuite √† jour 'authUser' avec le resultat de la fonction\n    // üê∂ cr√©√© une fonction 'logout' qui appelle la fonction 'logout' de  'authNetflix'\n    // et met √† jour 'authUser' √† null\n    // note : pour tester la deconnexion on poura cliquer sur le logo avatar (haut droite de la Appbar)\n\n    return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: /*#__PURE__*/_jsxDEV(AuthApp, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(App, \"TVTL2WymH8LPiPX8vka/W2C28u0=\");\n\n_c = App;\nexport { App };\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/App.exercise.js"],"names":["React","server","handlers","db","authNetflix","createTheme","ThemeProvider","AuthApp","UnauthApp","theme","palette","type","primary","main","secondary","App","authUser","setAuthUser","useState","login","data","then","user","register","logout"],"mappings":";;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CACA;AACA;;AACA,OAAO,SAAP;AACA,SAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,EAA1B,QAAmC,SAAnC,C,CACA;;AACA,OAAO,KAAKC,WAAZ,MAA6B,6BAA7B;AACA,SAAQC,WAAR,EAAqBC,aAArB,QAAyC,sBAAzC,C,CACA;AACA;;AACA,SAAQC,OAAR,QAAsB,SAAtB;AACA,SAAQC,SAAR,QAAwB,oBAAxB,C,CACA;;;AAEA,MAAMC,KAAK,GAAGJ,WAAW,CAAC;AACxBK,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,MADC;AAEPC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AADC,KAFF;AAKPC,IAAAA,SAAS,EAAE;AACTD,MAAAA,IAAI,EAAE;AADG;AALJ;AADe,CAAD,CAAzB,C,CAYA;AACA;;AACA,SAASE,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BjB,KAAK,CAACkB,QAAN,CAAe,IAAf,CAAhC,CAFa,CAGb;;AACA,WAASC,KAAT,CAAeC,IAAf,EAAqB;AACnBhB,IAAAA,WAAW,CAACe,KAAZ,CAAkBC,IAAlB,EAAwBC,IAAxB,CAA6BC,IAAI,IAAIL,WAAW,CAACK,IAAD,CAAhD;AACD;;AACD,WAASC,QAAT,CAAkBH,IAAlB,EAAwB;AACtBhB,IAAAA,WAAW,CAACmB,QAAZ,CAAqBH,IAArB,EAA2BC,IAA3B,CAAgCC,IAAI,IAAIL,WAAW,CAACK,IAAD,CAAnD;AACD;;AACD,WAASE,MAAT,GAAkB;AAChBpB,IAAAA,WAAW,CAACoB,MAAZ;AACAP,IAAAA,WAAW,CAAC,IAAD,CAAX,CAFgB,CAGhB;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA,wBACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAER,KAAtB;AAAA,6BAGE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;AACF;;GAhCQM,G;;KAAAA,G;AAkCT,SAAQA,GAAR","sourcesContent":["import * as React from 'react'\n// üê∂ 'mocks' permet de simuler le backend netflix avec MSW,\n// ne t'en preocupe pas pour le moment\nimport './mocks'\nimport {server, handlers, db} from './mocks'\n// üê∂ 'authNetflix' notre outils founis par les devs back qui permet de se connecter\nimport * as authNetflix from './utils/authNetflixProvider'\nimport {createTheme, ThemeProvider} from '@mui/material/styles'\n// üê∂ 'AuthApp' contient tout ce qu'il y avait avant dans 'App'\n// il est import√© est retourn√©, nous avons donc le meme comportement qu'avant\nimport {AuthApp} from 'AuthApp'\nimport {UnauthApp} from 'UnauthApp.exercise'\n// üê∂ 'UnauthApp' qui contiendra le contenu de l'application en mode non connect√©\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark',\n    primary: {\n      main: '#E50914',\n    },\n    secondary: {\n      main: '#E50914',\n    },\n  },\n})\n\n// üê∂ on veut afficher soit <AuthApp /> soit <UnauthApp />\n// en fonction d'un user connect√© ou non\nfunction App() {\n  // üê∂ cr√©√© un state 'authUser' qui contiendra le 'user' connect√©\n  const [authUser, setAuthUser] = React.useState(null)\n  // üê∂ cr√©√© une fonction 'login' avec un param√®tre 'data' (objet avec 'username' et 'password')\n  function login(data) {\n    authNetflix.login(data).then(user => setAuthUser(user))\n  }\n  function register(data) {\n    authNetflix.register(data).then(user => setAuthUser(user))\n  }\n  function logout() {\n    authNetflix.logout()\n    setAuthUser(null)\n    // cette fonction appellera ensuite la fonction 'login' de 'authNetflix' avec data en parametre\n    // met ensuite √† jour 'authUser' avec le resultat de la fonction\n\n    // üê∂ cr√©√© une fonction 'register' avec un param√®tre 'data' (objet avec 'username' et 'password')\n    // cette fonction appellera ensuite la fonction 'register' de  'authNetflix' avec data en parametre\n    // met ensuite √† jour 'authUser' avec le resultat de la fonction\n\n    // üê∂ cr√©√© une fonction 'logout' qui appelle la fonction 'logout' de  'authNetflix'\n    // et met √† jour 'authUser' √† null\n    // note : pour tester la deconnexion on poura cliquer sur le logo avatar (haut droite de la Appbar)\n    return (\n      <ThemeProvider theme={theme}>\n        {/* üê∂ conditionne l'affichage de <AuthApp /> <UnauthApp /> en fonction de 'authUser'   */}\n        {/* üê∂ passe le prop 'logout' √†  <AuthApp />    */}\n        <AuthApp />\n        {/* üê∂ passe les prop 'login' et 'register'  √†  <UnauthApp />    */}\n      </ThemeProvider>\n    )\n  }\n}\n\nexport {App}\n"]},"metadata":{},"sourceType":"module"}