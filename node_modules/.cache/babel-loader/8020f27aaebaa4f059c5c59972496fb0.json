{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport * as React from 'react';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'fetching':\n      return {\n        status: 'fetching',\n        data: null,\n        error: null\n      };\n\n    case 'done':\n      return {\n        status: 'done',\n        data: action.payload,\n        error: null\n      };\n\n    case 'fail':\n      return {\n        status: 'error',\n        data: null,\n        error: action.error\n      };\n\n    default:\n      throw new Error('Action non supporté');\n  }\n};\n\nconst initialState = {\n  data: null,\n  error: null,\n  status: 'idle'\n};\n\nfunction useFetchData() {\n  _s();\n\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const {\n    data,\n    error,\n    status\n  } = state;\n  const execute = React.useCallback(promise => {\n    dispatch({\n      type: 'fetching'\n    });\n    promise.then(marvel => dispatch({\n      type: 'done',\n      payload: marvel\n    })).catch(error => dispatch({\n      type: 'fail',\n      error\n    }));\n  }, []);\n  const setData = React.useCallback(data => dispatch({\n    type: 'done',\n    payload: data\n  }), [dispatch]);\n  return {\n    data,\n    error,\n    status,\n    execute,\n    setData\n  };\n}\n\n_s(useFetchData, \"MZV3FkmidZd2KR38tvffPEuwUp0=\");\n\nexport { useFetchData };","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/utils/hooks.js"],"names":["React","reducer","state","action","type","status","data","error","payload","Error","initialState","useFetchData","dispatch","useReducer","execute","useCallback","promise","then","marvel","catch","setData"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAGA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AACE,aAAO;AAACC,QAAAA,MAAM,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE,IAA3B;AAAiCC,QAAAA,KAAK,EAAE;AAAxC,OAAP;;AACF,SAAK,MAAL;AACE,aAAO;AAACF,QAAAA,MAAM,EAAE,MAAT;AAAiBC,QAAAA,IAAI,EAAEH,MAAM,CAACK,OAA9B;AAAuCD,QAAAA,KAAK,EAAE;AAA9C,OAAP;;AACF,SAAK,MAAL;AACE,aAAO;AAACF,QAAAA,MAAM,EAAE,OAAT;AAAkBC,QAAAA,IAAI,EAAE,IAAxB;AAA8BC,QAAAA,KAAK,EAAEJ,MAAM,CAACI;AAA5C,OAAP;;AACF;AACE,YAAM,IAAIE,KAAJ,CAAU,qBAAV,CAAN;AARJ;AAUD,CAXD;;AAYA,MAAMC,YAAY,GAAG;AACnBJ,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBF,EAAAA,MAAM,EAAE;AAHW,CAArB;;AAKA,SAASM,YAAT,GAAwB;AAAA;;AACtB,QAAM,CAACT,KAAD,EAAQU,QAAR,IAAoBZ,KAAK,CAACa,UAAN,CAAiBZ,OAAjB,EAA0BS,YAA1B,CAA1B;AACA,QAAM;AAACJ,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcF,IAAAA;AAAd,MAAwBH,KAA9B;AAEA,QAAMY,OAAO,GAAGd,KAAK,CAACe,WAAN,CAAkBC,OAAO,IAAI;AAC3CJ,IAAAA,QAAQ,CAAC;AAACR,MAAAA,IAAI,EAAE;AAAP,KAAD,CAAR;AACAY,IAAAA,OAAO,CACJC,IADH,CACQC,MAAM,IAAIN,QAAQ,CAAC;AAACR,MAAAA,IAAI,EAAE,MAAP;AAAeI,MAAAA,OAAO,EAAEU;AAAxB,KAAD,CAD1B,EAEGC,KAFH,CAESZ,KAAK,IAAIK,QAAQ,CAAC;AAACR,MAAAA,IAAI,EAAE,MAAP;AAAeG,MAAAA;AAAf,KAAD,CAF1B;AAGD,GALe,EAKb,EALa,CAAhB;AAOA,QAAMa,OAAO,GAAGpB,KAAK,CAACe,WAAN,CACdT,IAAI,IAAIM,QAAQ,CAAC;AAACR,IAAAA,IAAI,EAAE,MAAP;AAAeI,IAAAA,OAAO,EAAEF;AAAxB,GAAD,CADF,EAEd,CAACM,QAAD,CAFc,CAAhB;AAKA,SAAO;AAACN,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcF,IAAAA,MAAd;AAAsBS,IAAAA,OAAtB;AAA+BM,IAAAA;AAA/B,GAAP;AACD;;GAjBQT,Y;;AAmBT,SAAQA,YAAR","sourcesContent":["import * as React from 'react'\n\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'fetching':\n      return {status: 'fetching', data: null, error: null}\n    case 'done':\n      return {status: 'done', data: action.payload, error: null}\n    case 'fail':\n      return {status: 'error', data: null, error: action.error}\n    default:\n      throw new Error('Action non supporté')\n  }\n}\nconst initialState = {\n  data: null,\n  error: null,\n  status: 'idle',\n}\nfunction useFetchData() {\n  const [state, dispatch] = React.useReducer(reducer, initialState)\n  const {data, error, status} = state\n\n  const execute = React.useCallback(promise => {\n    dispatch({type: 'fetching'})\n    promise\n      .then(marvel => dispatch({type: 'done', payload: marvel}))\n      .catch(error => dispatch({type: 'fail', error}))\n  }, [])\n\n  const setData = React.useCallback(\n    data => dispatch({type: 'done', payload: data}),\n    [dispatch],\n  )\n\n  return {data, error, status, execute, setData}\n}\n\nexport {useFetchData}"]},"metadata":{},"sourceType":"module"}