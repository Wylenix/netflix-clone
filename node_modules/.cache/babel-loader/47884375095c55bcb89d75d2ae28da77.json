{"ast":null,"code":"var _jsxFileName = \"/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixRow.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { TYPE_MOVIE, imagePath400 } from '../config';\nimport { useFetchData } from '../utils/hooks';\nimport { clientApi } from '../utils/clientApi';\nimport { Alert, AlertTitle } from '@mui/material';\nimport { RowSkeleton } from './skeletons/RowSkeleton';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NetflixRow = ({\n  title = '',\n  wideImage = true,\n  type = TYPE_MOVIE,\n  param,\n  filter = 'populaire',\n  watermark = false\n}) => {\n  _s();\n\n  const {\n    data,\n    error,\n    status,\n    execute\n  } = useFetchData();\n  const [queried, setQueried] = React.useState(true);\n  const endpointLatest = `${type}/upcoming`;\n  const endpointPopular = `${type}/popular`;\n  const endpointTopRated = `${type}/top_rated`;\n  const endpointGenre = `discover/${type}?with_genres=${param}`;\n  const endpointTrending = `trending/${type}/day`;\n  let endpoint;\n\n  switch (filter) {\n    case 'populaire':\n      endpoint = endpointPopular;\n      break;\n\n    case 'latest':\n      endpoint = endpointLatest;\n      break;\n\n    case 'toprated':\n      endpoint = endpointTopRated;\n      break;\n\n    case 'genre':\n      endpoint = endpointGenre;\n      break;\n\n    case 'trending':\n      endpoint = endpointTrending;\n      break;\n\n    default:\n      throw new Error('Type non supportÃ©');\n  }\n\n  React.useEffect(() => {\n    if (!queried) {\n      return;\n    }\n\n    execute(clientApi(`${endpoint}`));\n    setQueried(false);\n  }, [endpoint, execute, queried]);\n\n  const buildImagePath = data => {\n    const image = wideImage ? data === null || data === void 0 ? void 0 : data.backdrop_path : data === null || data === void 0 ? void 0 : data.poster_path;\n    return image ? `${imagePath400}${image}` : null;\n  };\n\n  const watermarkClass = watermark ? 'watermarked' : '';\n\n  if (status === 'fetching' || status === 'idle') {\n    return /*#__PURE__*/_jsxDEV(RowSkeleton, {\n      title: title,\n      wideImage: wideImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (status === 'error') {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n        children: \"Une erreur est survenue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), \"Detail : \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: data.data.results.map(movie => {\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: `/${type}/${movie.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `row__poster row__posterLarge ${watermarkClass}`,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: buildImagePath(movie),\n              alt: movie.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NetflixRow, \"pV2FiOQQ6uwjyWZ6FOj+wzG/HWo=\", false, function () {\n  return [useFetchData];\n});\n\n_c = NetflixRow;\nexport { NetflixRow };\n\nvar _c;\n\n$RefreshReg$(_c, \"NetflixRow\");","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixRow.js"],"names":["React","TYPE_MOVIE","imagePath400","useFetchData","clientApi","Alert","AlertTitle","RowSkeleton","Link","NetflixRow","title","wideImage","type","param","filter","watermark","data","error","status","execute","queried","setQueried","useState","endpointLatest","endpointPopular","endpointTopRated","endpointGenre","endpointTrending","endpoint","Error","useEffect","buildImagePath","image","backdrop_path","poster_path","watermarkClass","message","results","map","movie","id","name"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport {TYPE_MOVIE, imagePath400} from '../config'\nimport {useFetchData} from '../utils/hooks'\nimport {clientApi} from '../utils/clientApi'\nimport {Alert, AlertTitle} from '@mui/material'\nimport {RowSkeleton} from './skeletons/RowSkeleton'\nimport {Link} from 'react-router-dom'\n\nconst NetflixRow = ({\n  title = '',\n  wideImage = true,\n  type = TYPE_MOVIE,\n  param,\n  filter = 'populaire',\n  watermark = false,\n}) => {\n  const {data, error, status, execute} = useFetchData()\n  const [queried, setQueried] = React.useState(true)\n\n  const endpointLatest = `${type}/upcoming`\n  const endpointPopular = `${type}/popular`\n  const endpointTopRated = `${type}/top_rated`\n  const endpointGenre = `discover/${type}?with_genres=${param}`\n  const endpointTrending = `trending/${type}/day`\n\n  let endpoint\n  switch (filter) {\n    case 'populaire':\n      endpoint = endpointPopular\n      break\n    case 'latest':\n      endpoint = endpointLatest\n      break\n    case 'toprated':\n      endpoint = endpointTopRated\n      break\n    case 'genre':\n      endpoint = endpointGenre\n      break\n    case 'trending':\n      endpoint = endpointTrending\n      break\n    default:\n      throw new Error('Type non supportÃ©')\n  }\n\n  React.useEffect(() => {\n    if (!queried) {\n      return\n    }\n    execute(clientApi(`${endpoint}`))\n    setQueried(false)\n  }, [endpoint, execute, queried])\n\n  const buildImagePath = data => {\n    const image = wideImage ? data?.backdrop_path : data?.poster_path\n    return image ? `${imagePath400}${image}` : null\n  }\n\n  const watermarkClass = watermark ? 'watermarked' : ''\n\n  if (status === 'fetching' || status === 'idle') {\n    return <RowSkeleton title={title} wideImage={wideImage} />\n  }\n  if (status === 'error') {\n    return (\n      <Alert severity=\"error\">\n        <AlertTitle>Une erreur est survenue</AlertTitle>\n        Detail : {error.message}\n      </Alert>\n    )\n  }\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {data.data.results.map(movie => {\n          return (\n            <Link key={movie.id} to={`/${type}/${movie.id}`} >\n            <div\n              \n              className={`row__poster row__posterLarge ${watermarkClass}`}\n            >\n              <img src={buildImagePath(movie)} alt={movie.name} />\n            </div>\n            </Link>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport {NetflixRow}\n"]},"metadata":{},"sourceType":"module"}