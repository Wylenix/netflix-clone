{"ast":null,"code":"var _jsxFileName = \"/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixById.exercise.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { NetflixAppBar } from './NetflixAppBar';\nimport { NetflixRow } from './NetflixRow';\nimport { NetFlixFooter } from './NetFlixFooter';\nimport { NetflixHeader } from './NetflixHeader'; // üê∂ supprime 'getRandomType' et 'getRandomId' car nous n'utiliseront plus de films al√©atoires\n\nimport { getRandomType, getRandomId } from '../utils/helper';\nimport { clientApi } from '../utils/clientApi';\nimport { makeStyles } from '@mui/styles';\nimport { Alert, AlertTitle } from '@mui/material';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { useFetchData } from '../utils/hooks';\nimport { TYPE_MOVIE, TYPE_TV } from '../config';\nimport './Netflix.css'; // üê∂ importe les hooks 'useParams' et 'useLocation' de \"react-router-dom\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  alert: {\n    width: '50%',\n    margin: 'auto',\n    marginBotton: '50px'\n  },\n  progress: {\n    marginLeft: '30px'\n  }\n}));\n\nconst NetflixById = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    data: headerMovie,\n    error,\n    status,\n    execute\n  } = useFetchData(); // üê∂ utilise le hook 'useParams' pour r√©cuperer les valeurs de 'tvId' et 'movieId'\n  // üê∂ utilise le hook 'useLocation' pour r√©cuperer la valeur de 'pathname'\n  // cela nous permetra de savoir si l'url est /tv/:tvId ou /movie/:movieId\n  // donc de pouvoir determiner le 'type' (TYPE_TV ou TYPE_MOVIE)\n  // ‚õèÔ∏è supprime 'getRandomType()' et met la valeur de type determin√©e plus haut.\n\n  const [type] = React.useState(getRandomType()); // üê∂ determine l'id en fonction du type (soit 'tvId' soit 'movieId' )\n\n  const defaultMovieId = getRandomId(type);\n  React.useEffect(() => {\n    execute(clientApi(`${type}/${defaultMovieId}`));\n  }, [execute, defaultMovieId, type]); // üê∂ Utilise √† nouveau 'useEffect' pour mettre √† jour les 3 states suivants:\n  // - 'type'\n  // - 'id'\n  // - 'queried'\n  // ce qui va ensuite d√©clancher un nouvelle appel API\n  //\n  // n'oublie pas les d√©pendances\n\n  if (status === 'error') {\n    // sera catch√© par ErrorBoundary\n    throw new Error(error.message);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NetflixAppBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixHeader, {\n      movie: headerMovie === null || headerMovie === void 0 ? void 0 : headerMovie.data,\n      type: type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixRow, {\n      wideImage: true,\n      watermark: true,\n      type: TYPE_MOVIE,\n      filter: \"trending\",\n      title: \"Films Netflix\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixRow, {\n      wideImage: false,\n      watermark: true,\n      type: TYPE_TV,\n      filter: \"trending\",\n      title: \"S\\xE9rie Netflix\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixRow, {\n      type: TYPE_MOVIE,\n      filter: \"toprated\",\n      title: \"Les mieux not\\xE9s\",\n      watermark: true,\n      wideImage: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixRow, {\n      type: TYPE_TV,\n      filter: \"genre\",\n      param: \"10759\",\n      title: \"Action & aventure\",\n      watermark: true,\n      wideImage: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NetflixRow, {\n      type: TYPE_MOVIE,\n      filter: \"genre\",\n      param: \"53\",\n      title: \"Les meilleurs Thriller\",\n      watermark: false,\n      wideImage: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), status === 'error' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.alert,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(AlertTitle, {\n          children: \"Une erreur est survenue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), \"Detail : \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this) : null, status === 'fetching' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.progress,\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), ' ']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(NetFlixFooter, {\n      color: \"secondary\",\n      si: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NetflixById, \"J8wMfPvcVM0WPa787O/aI1NLWCw=\", false, function () {\n  return [useStyles, useFetchData];\n});\n\n_c = NetflixById;\nexport { NetflixById };\n\nvar _c;\n\n$RefreshReg$(_c, \"NetflixById\");","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixById.exercise.js"],"names":["React","NetflixAppBar","NetflixRow","NetFlixFooter","NetflixHeader","getRandomType","getRandomId","clientApi","makeStyles","Alert","AlertTitle","CircularProgress","useFetchData","TYPE_MOVIE","TYPE_TV","useStyles","theme","alert","width","margin","marginBotton","progress","marginLeft","NetflixById","classes","data","headerMovie","error","status","execute","type","useState","defaultMovieId","useEffect","Error","message"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {NetflixAppBar} from './NetflixAppBar'\nimport {NetflixRow} from './NetflixRow'\nimport {NetFlixFooter} from './NetFlixFooter'\nimport {NetflixHeader} from './NetflixHeader'\n// üê∂ supprime 'getRandomType' et 'getRandomId' car nous n'utiliseront plus de films al√©atoires\nimport {getRandomType, getRandomId} from '../utils/helper'\nimport {clientApi} from '../utils/clientApi'\nimport {makeStyles} from '@mui/styles'\nimport {Alert, AlertTitle} from '@mui/material'\nimport CircularProgress from '@mui/material/CircularProgress'\nimport {useFetchData} from '../utils/hooks'\nimport {TYPE_MOVIE, TYPE_TV} from '../config'\nimport './Netflix.css'\n\n// üê∂ importe les hooks 'useParams' et 'useLocation' de \"react-router-dom\"\n\nconst useStyles = makeStyles(theme => ({\n  alert: {\n    width: '50%',\n    margin: 'auto',\n    marginBotton: '50px',\n  },\n  progress: {\n    marginLeft: '30px',\n  },\n}))\n\nconst NetflixById = () => {\n  const classes = useStyles()\n  const {data: headerMovie, error, status, execute} = useFetchData()\n  // üê∂ utilise le hook 'useParams' pour r√©cuperer les valeurs de 'tvId' et 'movieId'\n  // üê∂ utilise le hook 'useLocation' pour r√©cuperer la valeur de 'pathname'\n  // cela nous permetra de savoir si l'url est /tv/:tvId ou /movie/:movieId\n  // donc de pouvoir determiner le 'type' (TYPE_TV ou TYPE_MOVIE)\n\n  // ‚õèÔ∏è supprime 'getRandomType()' et met la valeur de type determin√©e plus haut.\n  const [type] = React.useState(getRandomType())\n\n  // üê∂ determine l'id en fonction du type (soit 'tvId' soit 'movieId' )\n  const defaultMovieId = getRandomId(type)\n\n  React.useEffect(() => {\n    execute(clientApi(`${type}/${defaultMovieId}`))\n  }, [execute, defaultMovieId, type])\n\n  // üê∂ Utilise √† nouveau 'useEffect' pour mettre √† jour les 3 states suivants:\n  // - 'type'\n  // - 'id'\n  // - 'queried'\n  // ce qui va ensuite d√©clancher un nouvelle appel API\n  //\n  // n'oublie pas les d√©pendances\n\n  if (status === 'error') {\n    // sera catch√© par ErrorBoundary\n    throw new Error(error.message)\n  }\n  return (\n    <div>\n      <NetflixAppBar />\n      <NetflixHeader movie={headerMovie?.data} type={type} />\n      <NetflixRow\n        wideImage={true}\n        watermark={true}\n        type={TYPE_MOVIE}\n        filter=\"trending\"\n        title=\"Films Netflix\"\n      />\n      <NetflixRow\n        wideImage={false}\n        watermark={true}\n        type={TYPE_TV}\n        filter=\"trending\"\n        title=\"S√©rie Netflix\"\n      />\n\n      <NetflixRow\n        type={TYPE_MOVIE}\n        filter=\"toprated\"\n        title=\"Les mieux not√©s\"\n        watermark={true}\n        wideImage={true}\n      />\n\n      <NetflixRow\n        type={TYPE_TV}\n        filter=\"genre\"\n        param=\"10759\"\n        title=\"Action & aventure\"\n        watermark={true}\n        wideImage={true}\n      />\n\n      <NetflixRow\n        type={TYPE_MOVIE}\n        filter=\"genre\"\n        param=\"53\"\n        title=\"Les meilleurs Thriller\"\n        watermark={false}\n        wideImage={false}\n      />\n\n      {status === 'error' ? (\n        <div className={classes.alert}>\n          <Alert severity=\"error\">\n            <AlertTitle>Une erreur est survenue</AlertTitle>\n            Detail : {error.message}\n          </Alert>\n        </div>\n      ) : null}\n\n      {status === 'fetching' ? (\n        <div className={classes.progress}>\n          <CircularProgress />{' '}\n        </div>\n      ) : null}\n      <NetFlixFooter color=\"secondary\" si />\n    </div>\n  )\n}\nexport {NetflixById}\n"]},"metadata":{},"sourceType":"module"}