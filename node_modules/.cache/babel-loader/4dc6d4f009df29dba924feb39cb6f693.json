{"ast":null,"code":"var _jsxFileName = \"/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixRow.exercise.js\";\nimport * as React from 'react'; // 🐶 importe 'useFetchData', 'clientApi', 'Alert', 'AlertTitle' et 'CircularProgress' 'TYPE_MOVIE', 'imagePath400'\n// 🐶 Ajoute les 'props' suivant à 'NetflixRow' :\n// - 'type' pour identifier si on est en mode series ou films (valeur par defaut 'TYPE_MOVIE') \n// - 'param' qui contiendra des params de recherche (id de genre par exemple)\n// - 'filter' qui permet de filtrer les films/series, les valeurs possibles sont :\n//    - 'populaire' : valeur par defaut du props 'filter'\n//    - 'latest'\n//    - 'toprated'\n//    - 'genre'\n//    - 'trending'\n// - 'watermark' un boolean qui permet d'indiquer si l'on ajoute le logo NetFlix sur les pochettes (false par défaut)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NetflixRow = ({\n  title = '',\n  wideImage = true\n}) => {\n  // 🐶 Utilise le Hook 'useFetchData' (avec {data, error, status, execute})\n  // 🐶 determine le bon 'endpoint' qui permet de faire le bon appel API\n  // utilise le prop 'filter' pour determiner le bon enpoint.\n  // \n  // les 5 endpoints possibles pour le moment sont\n  // \n  // const endpointPopular = `${type}/popular`\n  // const endpointLatest = `${type}/latest`\n  // const endpointTopRated = `${type}/top_rated`\n  // const endpointGenre = `discover/${type}?with_genres=${param}`\n  // const endpointTrending = `trending/${type}/day`\n  // 🐶 utilise le Hook 'useEffect' pour faire le bon appel API\n  // en utilisant 'execute', 'clientAPi', 'endpoint'\n  // 🐶 créé une fonction 'buildImagePath' qui prend en paramètre 'data', data sera la donnée\n  // provenant de l'api, elle peut etre une film ou une serie.\n  // le but de cette fonction est de retourner la bonne URL de l'image en fonction du prop 'wideImage'\n  // Si 'wideImage' est à 'true' on utilisera le champs 'backdrop_path' sinon 'poster_path'\n  // utilise la constante 'imagePath400' qui contient le debut de l'url pour un image.\n  const image = wideImage ? 'images/sample-poster.jpg' : 'images/sample.jpg'; // 🐶 créé une constante 'watermarkClass' qui permettra de mettre le logo sur l'image\n  // watermarkClass vaut 'watermarked' si le prop 'watermark' est à true, vide sinon\n  // 🐶 si 'status' vaut 'fetching' ou 'idle' retourne le composant <CircularProgress />\n  // structure :\n  // <div> classe 'row'\n  // - <h2> avec le 'title'\n  // - <div> classe 'row__posters'\n  //  - <CircularProgress>\n  // 🐶 si 'status' vaut 'error' retoune le composant <Alert /> contenant <AlertTitle>\n  // 🐶 rendu du composant quand des données sont récuperés\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"row__poster row__posterLarge\",\n        src: image,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"row__poster row__posterLarge\",\n        src: image,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"row__poster row__posterLarge\",\n        src: image,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"row__poster row__posterLarge\",\n        src: image,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NetflixRow;\nexport { NetflixRow };\n\nvar _c;\n\n$RefreshReg$(_c, \"NetflixRow\");","map":{"version":3,"sources":["/Users/lio/Documents/Programmation/React-MikeC/react-netflix-clone/src/components/NetflixRow.exercise.js"],"names":["React","NetflixRow","title","wideImage","image"],"mappings":";AAAA,OAAQ,KAAKA,KAAb,MAAwB,OAAxB,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA,KAAK,GAAE,EAAR;AAAWC,EAAAA,SAAS,GAAG;AAAvB,CAAD,KAAkC;AACnD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,QAAMC,KAAK,GAAGD,SAAS,GAAG,0BAAH,GAAgC,mBAAvD,CAtBmD,CAwBnD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BAEE;AAAK,QAAA,SAAS,EAAC,8BAAf;AAA8C,QAAA,GAAG,EAAEE,KAAnD;AAA0D,QAAA,GAAG,EAAC;AAA9D;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,8BAAf;AAA8C,QAAA,GAAG,EAAEA,KAAnD;AAA0D,QAAA,GAAG,EAAC;AAA9D;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAK,QAAA,SAAS,EAAC,8BAAf;AAA8C,QAAA,GAAG,EAAEA,KAAnD;AAA0D,QAAA,GAAG,EAAC;AAA9D;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAK,QAAA,SAAS,EAAC,8BAAf;AAA8C,QAAA,GAAG,EAAEA,KAAnD;AAA0D,QAAA,GAAG,EAAC;AAA9D;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAvDD;;KAAMH,U;AAwDN,SAAQA,UAAR","sourcesContent":["import  * as React from 'react'\n// 🐶 importe 'useFetchData', 'clientApi', 'Alert', 'AlertTitle' et 'CircularProgress' 'TYPE_MOVIE', 'imagePath400'\n\n// 🐶 Ajoute les 'props' suivant à 'NetflixRow' :\n// - 'type' pour identifier si on est en mode series ou films (valeur par defaut 'TYPE_MOVIE') \n// - 'param' qui contiendra des params de recherche (id de genre par exemple)\n// - 'filter' qui permet de filtrer les films/series, les valeurs possibles sont :\n//    - 'populaire' : valeur par defaut du props 'filter'\n//    - 'latest'\n//    - 'toprated'\n//    - 'genre'\n//    - 'trending'\n// - 'watermark' un boolean qui permet d'indiquer si l'on ajoute le logo NetFlix sur les pochettes (false par défaut)\nconst NetflixRow = ({title ='',wideImage = true}) => {\n  // 🐶 Utilise le Hook 'useFetchData' (avec {data, error, status, execute})\n  \n  // 🐶 determine le bon 'endpoint' qui permet de faire le bon appel API\n  // utilise le prop 'filter' pour determiner le bon enpoint.\n  // \n  // les 5 endpoints possibles pour le moment sont\n  // \n  // const endpointPopular = `${type}/popular`\n  // const endpointLatest = `${type}/latest`\n  // const endpointTopRated = `${type}/top_rated`\n  // const endpointGenre = `discover/${type}?with_genres=${param}`\n  // const endpointTrending = `trending/${type}/day`\n  \n  // 🐶 utilise le Hook 'useEffect' pour faire le bon appel API\n  // en utilisant 'execute', 'clientAPi', 'endpoint'\n\n  // 🐶 créé une fonction 'buildImagePath' qui prend en paramètre 'data', data sera la donnée\n  // provenant de l'api, elle peut etre une film ou une serie.\n  // le but de cette fonction est de retourner la bonne URL de l'image en fonction du prop 'wideImage'\n  // Si 'wideImage' est à 'true' on utilisera le champs 'backdrop_path' sinon 'poster_path'\n  // utilise la constante 'imagePath400' qui contient le debut de l'url pour un image.\n  const image = wideImage ? 'images/sample-poster.jpg' : 'images/sample.jpg'\n\n  // 🐶 créé une constante 'watermarkClass' qui permettra de mettre le logo sur l'image\n  // watermarkClass vaut 'watermarked' si le prop 'watermark' est à true, vide sinon\n\n  // 🐶 si 'status' vaut 'fetching' ou 'idle' retourne le composant <CircularProgress />\n  // structure :\n  // <div> classe 'row'\n  // - <h2> avec le 'title'\n  // - <div> classe 'row__posters'\n  //  - <CircularProgress>\n\n  // 🐶 si 'status' vaut 'error' retoune le composant <Alert /> contenant <AlertTitle>\n\n  // 🐶 rendu du composant quand des données sont récuperés\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row__posters\">\n        {/* ⛏️ supprime ces 4 images en dur */}\n        <img className=\"row__poster row__posterLarge\" src={image} alt=\"\" />\n        <img className=\"row__poster row__posterLarge\" src={image} alt=\"\" />\n        <img className=\"row__poster row__posterLarge\" src={image} alt=\"\" />\n        <img className=\"row__poster row__posterLarge\" src={image} alt=\"\" />\n        {/* 🐶 itère sur les données de l'api avec `map`\n          - les données (films/series) de l'api sont dans `data.data.results`\n          Pour chaque élémént afiche :\n          - une <div> avec le prop 'className' : 'row__poster' 'row__posterLarge' et la variable watermarkClass\n            - Dans cette  <div> une <img> avec comme source 'buildImagePath' et 'alt' le nom du film\n         */}\n      </div>\n    </div>\n  )\n}\nexport {NetflixRow}"]},"metadata":{},"sourceType":"module"}